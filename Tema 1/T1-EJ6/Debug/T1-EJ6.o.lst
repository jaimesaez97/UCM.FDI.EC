   1              	# 1 "../T1-EJ6.asm"
   1              	// EJERCICIO 3
   0              	
   0              	
   0              	
   2              	
   3              	
   4              	.global start
   5              	.EQU N,4
   6              	.data
   7              	
   8              	@DA IGUAL EL ARRAY QUE METAMOS: SABEMOS QUE MAXIMO TENDRA 160B:
   9              	@ 10 structs de 16 bytes (2 num, 2*6 nota, 2 media)
  10              	
  11 0000 01000000 	A: 	.word 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16	@ matriz tam 4x4
  11      02000000 
  11      03000000 
  11      04000000 
  11      05000000 
  12 0040 01000000 	B: 	.word 1, 2, 3, 4											@ vector tam 4
  12      02000000 
  12      03000000 
  12      04000000 
  13              	
  14              	.bss
  15 0000 00000000 	C: 	.space (4*N)*(4*N)
  15      00000000 
  15      00000000 
  15      00000000 
  15      00000000 
  16              	
  17              	.text
  18              	abs_escalar:
  19              	
  20 0000 F0872DE9 			PUSH {r4-r10, PC}
  21 0004 0040A0E1 			MOV R4, R0	@ r4 <- =A
  22 0008 0150A0E1 			MOV R5, R1	@ r5 <- =B
  23 000c 0260A0E1 			MOV R6, R2  @ r6 <- n
  24 0010 0070A0E3 			MOV R7, #0	@ r7 <- j
  25 0014 00A0A0E3 			MOV R10, #0	@ r10 <- C[i]
  26              		b2:
  27 0018 040057E3 			CMP R7, #N
  28 001c 090000AA 			BGE b2_end
  29              	
  30              			@ no hay que sumarle a la direccion
  31              			@ base de A i * NCOLUMNAS porque lo
  32              			@ hemos adaptado al pasarlo por par.
  33              	
  34 0020 070194E7 			LDR R0, [R4, R7, LSL #2]	@ r8 <- A[i][j]
  35 0024 FEFFFFEB 			BL abs
  36 0028 0080A0E1 			MOV R8, R0					@ r8 <- abs(A[i][j])
  37              	
  38 002c 070195E7 			LDR R0, [R5, R7, LSL #2]	@ r9 <- B[j]
  39 0030 FEFFFFEB 			BL abs
  40 0034 0090A0E1 			MOV R9, R0			@ r9 <- abs(B[i])
  41              	
  42 0038 99080BE0 			MUL R11, R9, R8		@ r9 <- abs(A[i][j])*abs(B[i])
  43 003c 0BA08AE0 			ADD R10, R10, R11	@ r10 <- r10 += abs(A[i][j])*abs(B[i])
  44              	
  45 0040 017087E2 			ADD R7, R7, #1
  46 0044 F3FFFFEA 			B b2
  47              		b2_end:
  48              	
  49 0048 F087BDE8 			POP {r4-r10, PC}
  50 004c 1EFF2FE1 			BX LR
  51              	
  52              	start:
  53              	
  54 0050 38409FE5 			LDR R4, =A
  55 0054 38509FE5 			LDR R5, =B
  56 0058 38609FE5 			LDR R6, =C
  57 005c 0070A0E3 			MOV R7, #0		@ r7 <- i
  58              		b1:
  59 0060 040057E3 			CMP R7, #N
  60 0064 080000AA 			BGE b1_end
  61              	
  62 0068 0490A0E3 			MOV R9, #N
  63 006c 990708E0 			MUL R8, R9, R7	@ R8 <- (i * nColumnas)
  64 0070 080084E0 			ADD R0, R4, R8	@ r0 <- =A adaptada
  65 0074 0510A0E1 			MOV R1, R5		@ r1 <- =B
  66 0078 0420A0E3 			MOV R2, #N		@ r2 <- n
  67 007c DFFFFFEB 			BL abs_escalar
  68              	
  69 0080 070186E7 			STR R0, [R6, R7, LSL #2]	@ r0 -> C[i]
  70              	
  71 0084 017087E2 			ADD R7, R7, #1
  72 0088 F4FFFFEA 			B b1
  73              	
  74              		b1_end:
  75 008c FEFFFFEA 			B .
  76 0090 00000000 			.end
  76      40000000 
  76      00000000 
DEFINED SYMBOLS
       ../T1-EJ6.asm:52     .text:00000050 start
       ../T1-EJ6.asm:5      *ABS*:00000004 N
       ../T1-EJ6.asm:11     .data:00000000 A
       ../T1-EJ6.asm:12     .data:00000040 B
       ../T1-EJ6.asm:15     .bss:00000000 C
       ../T1-EJ6.asm:15     .bss:00000000 $d
       ../T1-EJ6.asm:18     .text:00000000 abs_escalar
       ../T1-EJ6.asm:20     .text:00000000 $a
       ../T1-EJ6.asm:26     .text:00000018 b2
       ../T1-EJ6.asm:47     .text:00000048 b2_end
       ../T1-EJ6.asm:58     .text:00000060 b1
       ../T1-EJ6.asm:74     .text:0000008c b1_end
       ../T1-EJ6.asm:76     .text:00000090 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
abs
